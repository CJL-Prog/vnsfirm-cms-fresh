REACT_APP_SUPABASE_URL=https://lqxtbfluffsmwojpsxol.supabase.co
REACT_APP_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxeHRiZmx1ZmZzbXdvanBzeG9sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MTcwNzYsImV4cCI6MjA3MDA5MzA3Nn0.L9397DM3lApljymG_VLNBOEEJ71sS_dd3eNyzG9i4c8

# LawPay API
LAWPAY_API_KEY=m_IMyRicn2RSSLX5bExBKBjw
LAWPAY_API_SECRET=oJQMH_0dQEubnsQksHwymg3WsaxVCtk1X8f295uJkw53bABbzIahfpmiN7blSnh5
LAWPAY_ENVIRONMENT="sandbox"

=/**
 * Environment Service
 * Manages environment variables and configuration for third-party integrations
 */

// RingCentral Configuration
export const ringCentralConfig = {
  clientId: process.env.REACT_APP_RINGCENTRAL_CLIENT_ID || '',
  clientSecret: process.env.REACT_APP_RINGCENTRAL_CLIENT_SECRET || '',
  serverUrl: process.env.REACT_APP_RINGCENTRAL_SERVER_URL || 'https://platform.ringcentral.com',
  redirectUri: process.env.REACT_APP_RINGCENTRAL_REDIRECT_URI || ''
};

// Gmail Configuration
export const gmailConfig = {
  clientId: process.env.REACT_APP_GMAIL_CLIENT_ID || '',
  clientSecret: process.env.REACT_APP_GMAIL_CLIENT_SECRET || '',
  redirectUri: process.env.REACT_APP_GMAIL_REDIRECT_URI || '',
  primaryEmail: process.env.REACT_APP_GMAIL_PRIMARY_EMAIL || '',
  signature: process.env.REACT_APP_GMAIL_SIGNATURE || '',
  autoTracking: process.env.REACT_APP_GMAIL_AUTO_TRACKING === 'true'
};

// DocuSign Configuration
export const docusignConfig = {
  accountId: process.env.REACT_APP_DOCUSIGN_ACCOUNT_ID || '',
  integrationKey: process.env.REACT_APP_DOCUSIGN_INTEGRATION_KEY || '',
  secretKey: process.env.REACT_APP_DOCUSIGN_SECRET_KEY || '',
  environment: process.env.REACT_APP_DOCUSIGN_ENVIRONMENT || 'demo', // 'demo' or 'production'
  autoWorkflow: process.env.REACT_APP_DOCUSIGN_AUTO_WORKFLOW === 'true'
};

// Trello Configuration
export const trelloConfig = {
  apiKey: process.env.REACT_APP_TRELLO_API_KEY || '',
  accessToken: process.env.REACT_APP_TRELLO_ACCESS_TOKEN || '',
  newClientList: process.env.REACT_APP_TRELLO_NEW_CLIENT_LIST || 'New Leads',
  retainerSentList: process.env.REACT_APP_TRELLO_RETAINER_SENT_LIST || 'Retainer Sent',
  activeClientList: process.env.REACT_APP_TRELLO_ACTIVE_CLIENT_LIST || 'Active',
  autoCreateFromSlack: process.env.REACT_APP_TRELLO_AUTO_CREATE_FROM_SLACK === 'true',
  autoMoveOnRetainer: process.env.REACT_APP_TRELLO_AUTO_MOVE_ON_RETAINER === 'true',
  addDueDates: process.env.REACT_APP_TRELLO_ADD_DUE_DATES === 'true'
};

// Slack Configuration
export const slackConfig = {
  botToken: process.env.REACT_APP_SLACK_BOT_TOKEN || '',
  signingSecret: process.env.REACT_APP_SLACK_SIGNING_SECRET || '',
  autoCreateCards: process.env.REACT_APP_SLACK_AUTO_CREATE_CARDS === 'true'
};

// Application Configuration
export const appConfig = {
  environment: process.env.NODE_ENV || 'development',
  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',
  appName: process.env.REACT_APP_NAME || 'VNS Firm CMS',
  version: process.env.REACT_APP_VERSION || '1.0.0'
};

/**
 * Utility function to check if an integration is configured
 * @param {string} integration - Integration name
 * @returns {boolean} Whether the integration has required configuration
 */
export const isIntegrationConfigured = (integration) => {
  switch (integration.toLowerCase()) {
    case 'lawpay':
      return !!(lawpayConfig.apiKey && lawpayConfig.apiSecret);
    case 'ringcentral':
      return !!(ringCentralConfig.clientId && ringCentralConfig.clientSecret);
    case 'gmail':
      return !!(gmailConfig.clientId && gmailConfig.clientSecret);
    case 'docusign':
      return !!(docusignConfig.accountId && docusignConfig.integrationKey && docusignConfig.secretKey);
    case 'trello':
      return !!(trelloConfig.apiKey && trelloConfig.accessToken);
    case 'slack':
      return !!(slackConfig.botToken && slackConfig.signingSecret);
    case 'supabase':
      return !!(supabaseConfig.url && supabaseConfig.anonKey);
    default:
      return false;
  }
};

/**
 * Get configuration for a specific integration
 * @param {string} integration - Integration name
 * @returns {Object} Integration configuration
 */
export const getIntegrationConfig = (integration) => {
  switch (integration.toLowerCase()) {
    case 'lawpay':
      return lawpayConfig;
    case 'ringcentral':
      return ringCentralConfig;
    case 'gmail':
      return gmailConfig;
    case 'docusign':
      return docusignConfig;
    case 'trello':
      return trelloConfig;
    case 'slack':
      return slackConfig;
    case 'supabase':
      return supabaseConfig;
    default:
      return {};
  }
};

/**
 * Validate environment configuration on app startup
 * @returns {Object} Validation results
 */
export const validateEnvironmentConfig = () => {
  const issues = [];
  const warnings = [];

  // Check required Supabase configuration
  if (!supabaseConfig.url || supabaseConfig.url.includes('your-project')) {
    issues.push('REACT_APP_SUPABASE_URL is not configured');
  }
  if (!supabaseConfig.anonKey || supabaseConfig.anonKey.includes('your-anon-key')) {
    issues.push('REACT_APP_SUPABASE_ANON_KEY is not configured');
  }

  // Check optional integrations
  const integrations = [
    { name: 'LawPay', configured: isIntegrationConfigured('lawpay') },
    { name: 'RingCentral', configured: isIntegrationConfigured('ringcentral') },
    { name: 'Gmail', configured: isIntegrationConfigured('gmail') },
    { name: 'DocuSign', configured: isIntegrationConfigured('docusign') },
    { name: 'Trello', configured: isIntegrationConfigured('trello') },
    { name: 'Slack', configured: isIntegrationConfigured('slack') }
  ];

  integrations.forEach(integration => {
    if (!integration.configured) {
      warnings.push(`${integration.name} integration is not configured`);
    }
  });

  return {
    isValid: issues.length === 0,
    issues,
    warnings,
    configuredIntegrations: integrations.filter(i => i.configured).map(i => i.name)
  };
};

// Log configuration status in development
if (appConfig.environment === 'development') {
  const validation = validateEnvironmentConfig();
  
  if (validation.issues.length > 0) {
    console.error('❌ Environment Configuration Issues:', validation.issues);
  }
  
  if (validation.warnings.length > 0) {
    console.warn('⚠️ Environment Configuration Warnings:', validation.warnings);
  }
  
  if (validation.configuredIntegrations.length > 0) {
    console.log('✅ Configured Integrations:', validation.configuredIntegrations);
  }
}